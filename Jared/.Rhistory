curve(abs, from = -5 + (i * 0.05), to = 5 + (i * 0.05), col = "red", ylab = "")
curve(x^3-10*x^2-10*x+3, from = -5 + (i * 0.05), to = 5 + (i * 0.05), add = TRUE, col = "blue", ylab = "")
legend("topright", legend = c("sin(x)", "cos(x)","tan(x)"), fill = c("red", "blue","green"), bty = "n")
}
}, interval = 0.1, ani.width = 550, ani.height = 350)
library(datasets)
str(iris)
head(iris)
install.packages("mclust")
library(mclust)
fit <- Mclust(iris[,3:4])
summary(fit)
findLPF <- function(x) {
if (x < 1) return(NULL)
i <- 2
while (i <= sqrt(x)) {
while (x %% i == 0) { x <- x / i }
i <- i + 1
}
if (x == 1) return(i-1)
else return(x)
}
findLPF(10)
findLPF(13)
findLPF(1)
findLPF(0)
findLPF(-1)
findLPF(27)
findLPF(14)
findLPF(16)
findLPF(39)
findLPF(49)
findFactors <- function(x) {
if (x < 1) return(NULL)
cand <- c(1:x)
cand <- x / cand == floor(x / cand)
return(which(cand == TRUE))
}
findFactors(10)
typeof(findFactors(10))
findFactors <- function(x) {
if (x < 1) return(NULL)
cand <- c(1:x)
cand <- x %% cand == 0
return(which(cand == TRUE))
}
findFactors(10)
findFactors(13)
findFactors(1)
findFactors(2)
findFactors(3)
findFactors(4)
a <- c(1,2,3)
a
b <- c(2,3,4)
data.frame(a,b)
rbind(a,b)
install.packages("markovchain")
library(markovchain)
detach(package:markovchain)
require(markovchain)
detach(package:markovchain)
findLPF <- function(x) {
if (x < 1) return(NULL)
i <- 2
while (i <= sqrt(x)) {
while (x %% i == 0) { x <- x / i }
i <- i + 1
}
if (x == 1) return(i-1)
else return(x)
}
findLPF(10)
findLPF <- function(x) {
if (x < 1) return(NULL)
for (i in c(2:sqrt(x))) {
while (x %% i == 0) { x <- x / i }
}
if (x == 1) return(i-1)
else return(x)
}
findLPF(10)
findLPF(1)
findLPF <- function(x) {
if (x < 1) return(NULL)
for (i in c(2:sqrt(x))) {
while (x %% i == 0) { x <- x / i }
if (x == 1) return(i-1)
}
return(x)
}
findLPF(1)
findLPF(2)
findLPF(3)
findLPF(4)
findLPF(5)
findLPF(6)
findLPF <- function(x) {
if (x < 1) return(NULL)
for (i in c(2:sqrt(x))) {
while (x %% i == 0) { x <- x / i }
if (x == 1) return(i)
}
return(x)
}
findLPF(6)
findLPF(5)
findLPF(4)
findLPF(7)
findLPF(8)
findLPF(9)
findLPF(10)
findLPF <- function(x) {
if (x < 1) return(NULL)
for (i in c(2:sqrt(x))) {
while (x %% i == 0) x <- x / i
if (x == 1) return(i)
}
return(x)
}
findLPF(10)
findLPF <- function(x) {
if (x < 1) return(NULL)
for (i in c(2:sqrt(x))) {
while (x %% i == 0) x <- x / i
if (x == 1) return(i)
}
return(x)
}
x <- matrix(c(1:10000), nrow = 100)
x
start <- proc.time()
proc.time() - start
start <- proc.time()
proc.time() - start
start <- proc.time()
x <- c(1:10000)
x <- x * 2
proc.time() - start
x <- c(1:10000)
for (i in x) {
i <- i * 2
}
x
x <- c(1:10000)
for (i in c(1:10000)) {
x[i] <- x[i] * 2
}
x
start <- proc.time()
x <- c(1:10000)
for (i in c(1:10000)) {
x[i] <- x[i] * 2
}
proc.time() - start
start <- proc.time()
x <- c(1:10000)
x <- x * 2
proc.time() - start
start <- proc.time()
x <- c(1:10000)
for (i in c(1:10000)) {
x[i] <- x[i] * 2
}
proc.time() - start
start <- proc.time()
x <- c(1:10000)
x <- x ** 2
proc.time() - start
start <- proc.time()
x <- c(1:10000)
for (i in c(1:10000)) {
x[i] <- x[i] ** 2
}
proc.time() - start
start <- proc.time()
x <- matrix(c(1:10000), nrow = 100)
x <- x ** 2
proc.time() - start
start <- proc.time()
x <- matrix(c(1:10000), nrow = 100)
for (i in c(1:10000)) {
x[i] <- x[i] ** 2
}
proc.time() - start
x <- matrix(c(1:10000), nrow = 100)
x <- x ** 2
x
x <- matrix(c(1:10000), nrow = 100)
apply(x, 1, FUN = function(x){x ** 2})
library(parallel)
create <- function(x){
x <- matrix(nrow = 1000, ncol = 9)
y <- vector(mode = "numeric", length = 1000)
y <- c(1:1000)
x <- cbind(y,y+1,y+2,y+3,y+4,y+5,y+6,y+7, y+8)
return(x)
}
microbenchmark({
x <- create(x)
x <- as.matrix(x)
for(i in 1:dim(x)[1]){
for(j in 1:dim(x)[2]){
x[i,j] <- x[i,j]^10
# x[[j]][i] <- (x[[j]][i])^10
}
}
}, times = 100)
x <- matrix(c(1:100), nrow = 10)
apply(x, 1, FUN = function(x){x ** 2})
x <- matrix(c(1:100), nrow = 10)
apply(x, 2, FUN = function(x){x ** 2})
x <- matrix(c(1:100), nrow = 10)
x
apply(x, 1, FUN = function(x){x ** 2})
x
x <- matrix(c(1:100), nrow = 10)
apply(x, 1, FUN = sd)
x <- matrix(c(1:100), nrow = 10)
apply(x, 2, FUN = sd)
x <- matrix(c(1:100), nrow = 10)
apply(x, 1, FUN = sd)
x <- matrix(c(1:100), nrow = 10)
apply(x, 2, FUN = mean)
a <- apply(x, 1, FUN = sd)
x <- matrix(c(1:10000), nrow = 100)
a <- apply(x, 1, FUN = sd)
a
a <- apply(x, 1, FUN = function(x)(x ** 2))
a
a <- apply(x, 2, FUN = mean)
a
library("datasets")
AirData <- datasets::airquality
lapply(AirData[,1:4], median, na.rm = TRUE)
x <- matrix(c(1:10000), nrow = 100)
lapply(x, FUN = function(x){x ** 2})
library(datasets)
iris
lapply(iris, FUN = function(x){x ** 2})
lapply(iris[1], FUN = function(x){x ** 2})
Major <- c("Biomedical Engineering",
"Computer Science",
"Info Science",
"Chemical Engineering",
"Operation Research")
Male <- c(23,326,20,88,110)
Female <- c(65,134,23,99,107)
GenderDist <- data.frame(Major, Male, Female)
print(GenderDist)
print(GenderDist[1]) # prints the list of majors (observations)
print(GenderDist$Male[1]) # prints 23
max(GenderDist$Female)
mean(GenderDist$Female)
sd(GenderDist$Female)
mean.default(GenderDist$Female)
mean(GenderDist[3])
GenderDist$Female
GenderDist[3]
typeof(GenderDist[3])
typeof(GenderDist$Female)
typeof(GenderDist)
class(GenderDist)
class(GenderDist[3])
class(GenderDist$Female)
class(GenderDist[[3]])
mean(GenderDist[[3]])
q()
library(datasets)
a <- lapply(iris[1], FUN = function(x){x ** 2})
a
Major <- c("Biomedical Engineering",
"Computer Science",
"Info Science",
"Chemical Engineering",
"Operation Research")
Male <- c(23,326,20,88,110)
Female <- c(65,134,23,99,107)
GenderDist <- data.frame(Major, Male, Female)
print(GenderDist)
print(GenderDist[1]) # prints the list of majors (observations)
print(GenderDist$Male[1]) # prints 23
max(GenderDist$Female)
mean(GenderDist$Female)
sd(GenderDist$Female)
Major <- c("Material Science",
"Mechanical Engineering",
"Unaffiliated")
Male <- c(21,205,746)
Female <- c(32,78,690)
AddGenderList <- data.frame(Major, Male, Female)
NewGenderList <- rbind(GenderDist, AddGenderList)
print(NewGenderList)
NewGenderList$GenderDiff <- NewGenderList$Female - NewGenderList$Male
print(NewGenderList)
NewGenderList$GenderDiff <- NewGenderList[3] - NewGenderList[2]
print(NewGenderList)
NewGenderList$GenderDiff <- c(NewGenderList[3] - NewGenderList[2])
print(NewGenderList)
NewGenderList$GenderDiff <- NewGenderList[[3]] - NewGenderList[[2]]
print(NewGenderList)
Volcano <- datasets::volcano
apply(Volcano, 1, max)
apply(Volcano, 2, min)
dat <- iris
example <- dat[which(dat$Sepal.Length>6),]      #base function
example <- dplyr::filter(dat, Sepal.Length > 6) #dplyr function
which(dat$Sepal.Length>6)
example <- dat[,c(1,3,4)]                       #Matrix notation
example
df <- aggregate(formula = Petal.Width~Species,  #aggregate mean
data = iris, FUN=mean)
df
df <- plyr::count(iris, vars='Species')         #count using plyr
df
df <- plyr::count(iris, vars='Species')         #count using plyr
df
datasets::airquality
example <- dat[which(dat$Solar.R>100),]      #base function
example
dat <- datasets::airquality
example <- dat[which(dat$Solar.R>100),]      #base function
example
example <- dat[which(dat$Solar.R>200),]      #base function
example
nrow(example)
example <- dat[,c(1,3,4)]                       #Matrix notation
example
example <- dat[,c(1,3,4)]                       #Matrix notation
example <- dat[c(1,3,4)]                        #List notation
example_1 <- dplyr::select(dat, c(1,3,4))       #dplyr select
example_2 <- dplyr::select(dat,Sepal.Width)     #dplyr select
dat <- iris
example <- dat[which(dat$Sepal.Length>6),]      #base function
example <- dplyr::filter(dat, Sepal.Length > 6) #dplyr function
example <- sqldf("SELECT * FROM dat
WHERE [Sepal.Length]>6")       #sql WHERE clause
example <- dat[,c(1,3,4)]                       #Matrix notation
example <- dat[c(1,3,4)]                        #List notation
example_1 <- dplyr::select(dat, c(1,3,4))       #dplyr select
example_2 <- dplyr::select(dat,Sepal.Width)     #dplyr select
example<-sqldf("SELECT [Sepal.Length] FROM dat")#sql SELECT claus
ind <- c(1:nrow(dat))
ind
example_1<-cbind(ind,example_1)                 #combine by column
example_1
dat <- datasets::airquality
?merge
airquality
df <- aggregate(formula = Petal.Width~Species,  #aggregate mean
data = iris, FUN=mean)
df
df <- aggregate(formula = Temp~Month,  #aggregate mean
data = airquality, FUN=mean)
df
tapply(AirData$Temp, AirData$Month, mean, na.rm = TRUE)
tapply(airquality$Temp, AirData$Month, mean, na.rm = TRUE)
tapply(airquality$Temp, airquality$Month, mean, na.rm = TRUE)
df <- aggregate(formula = Temp~Month,  #aggregate mean
data = airquality, FUN=mean)
tapply(airquality$Temp, airquality$Month, mean, na.rm = TRUE)
df
str(airquality)
df <- aggregate(formula = Temp + Ozone~Month,  #aggregate mean
data = airquality, FUN=mean)
df
df <- aggregate(formula = Temp~Month,  #aggregate mean
data = airquality, FUN=count)
df <- aggregate(formula = Temp~Month,  #aggregate mean
data = airquality, FUN=sd)
df
df
typeof(df)
class(df)
df <- plyr::count(airquality, vars='Month')
df
df <- plyr::count(airquality, vars='Month')
ind <- c(1:nrow(dat))
dat <- datasets::airquality
example_1 <- dat[c(1,2)]
example_1 <- dat[c(3,4)]
example_1<-cbind(ind,example_1)                 #combine by column
example_2<-cbind(ind,example_2)
ind <- c(1:nrow(dat))
example_1 <- dat[c(1,2)]
example_2 <- dat[c(3,4)]
example_1<-cbind(ind,example_1)                 #combine by column
example_2<-cbind(ind,example_2)
example <- plyr::join(example_1,example_2,
by='ind',type='left')
example
example <- dat[which(dat$Solar.R>200),]      #base function
example <- dplyr::filter(dat, Sepal.Length > 6) #dplyr function
example <- dplyr::filter(dat, Solar.R > 6) #dplyr function
example <- dplyr::filter(dat, Solar.R > 6)$Solar.R
example
class(example)
str(airquality)
Major <- c("Biomedical Engineering",
"Computer Science",
"Info Science",
"Chemical Engineering",
"Operation Research")
Male <- c(23,326,20,88,110)
Female <- c(65,134,23,99,107)
x <- data.frame("Major" = Major, "Male" = Male, "Female" = Female, stringsAsFactors = FALSE)
x
GenderDist <- t(x)
GenderDist
GenderDist <- t(GenderDist)
GenderDist
x <- data.frame("Major" = Major, "Male" = Male, "Female" = Female, stringsAsFactors = FALSE)
GenderDist <- x
GenderDist
GenderDist[1]
install.packages("leafly")
install.packages("leaflet")
library(leaflet)
m <- leaflet()
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=174, lat=-36, popup = "The birthplace of R")
m
m <- m + geom_point()
m <- m + geom_points()
library(ggplot2)
m <- m + geom_points()
m <- m + geom_point()
q()
library(aod)
library(ggplot2)
library(Rcpp)
setwd("Desktop/Programming/Kaggle/March Madness/")
mydata <- read.csv("TourneyDetailedResults.csv")
setwd("Desktop/Programming/Kaggle/Kaggle-March-Madness/")
setwd("/Users/jaredlim/Desktop/Programming/Kaggle/Kaggle-March-Madness/Jared/")
regular <- read.csv("RegularDetailedResults.csv")
ls()
str(rs)
rs <- read.csv("RegularSeasonDetailedResults.csv")
str(rs)
data <- rbind(data, rs)
data <- read.csv("RegularSeasonDetailedResults.csv")
summary(data)
str(data)
setwd("/Users/jaredlim/Desktop/Programming/Kaggle/Kaggle-March-Madness/Jared/")
setwd("/Users/jaredlim/Desktop/Programming/Kaggle/Kaggle-March-Madness/ryan/")
future_prediction <- read.csv("future_predicions.csv")
future_prediction <- read.csv("future_predictions.csv")
getwd()
future_prediction <- read.csv("future_predictions.csv")
future_prediction <- read.csv("future_predictions.csv")
historical_prediction <- read.csv("historical_predictions.csv")
submission <- historical_prediction
for (i in c(1:nrow(submission))) {
id_1 <- submission[i,]$team1
id_2 <- submission[i,]$team2
elo_1 <- get_elo_of(id_1)
elo_2 <- get_elo_of(id_2)
elo_diff <- elo_1 - elo_2
submission[i,]$WTeam <- if (elo_1 > elo_2) id_1 else id_2
submission[i,]$pred <- sigmoid(0.01 * abs(elo_diff))
}
sigmoid <- function (x) {
return(1.0 / (1.0 + exp(-1.0 * x)))
}
get_elo_of <- function(id) {
return(team[which(team$Team_Id == id),]$Elo)
}
team$Elo <- 1500
team <- read.csv("Teams.csv")
setwd("/Users/jaredlim/Desktop/Programming/Kaggle/Kaggle-March-Madness/Jared/")
team <- read.csv("Teams.csv")
team$Elo <- 1500
for (i in c(1:nrow(data))) {
w_id <- data[i,]$Wteam
l_id <- data[i,]$Lteam
w_rating <- get_elo_of(w_id)
l_rating <- get_elo_of(l_id)
w_expected <- 1.0/(1.0+10**(l_rating - w_rating)/400.0)
l_expected <- 1.0/(1.0+10**(w_rating - l_rating)/400.0)
# winning = 1, losing = 0, K= 20
w_rating <- plyr::round_any(w_rating + 15 * l_expected, 1)
l_rating <- plyr::round_any(l_rating + 15 * w_expected, 1)
team[which(team$Team_Id == w_id),]$Elo = w_rating
team[which(team$Team_Id == l_id),]$Elo = l_rating
}
head(team)
write.csv(team, "team_elo.csv", row.names = FALSE)
head(submission)
for (i in c(1:nrow(submission))) {
id_1 <- submission[i,]$team1
id_2 <- submission[i,]$team2
elo_1 <- get_elo_of(id_1)
elo_2 <- get_elo_of(id_2)
elo_diff <- elo_1 - elo_2
#submission[i,]$WTeam <- if (elo_1 > elo_2) id_1 else id_2
submission[i,]$predicted <- sigmoid(0.01 * abs(elo_diff))
}
head(submission)
head(submission, 20)
for (i in c(1:nrow(submission))) {
id_1 <- submission[i,]$team1
id_2 <- submission[i,]$team2
elo_1 <- get_elo_of(id_1)
elo_2 <- get_elo_of(id_2)
elo_diff <- elo_1 - elo_2
#submission[i,]$WTeam <- if (elo_1 > elo_2) id_1 else id_2
submission[i,]$predicted <- sigmoid(0.01 * elo_diff)
}
head(submission, 20)
